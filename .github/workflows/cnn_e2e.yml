name: ResNet50 Debug
on: 
  workflow_dispatch:
    inputs:
      of_bad_commit:
        description: 'oneflow bad commit'
        required: true
        default: 'HEAD'
      of_good_commit:
        description: 'oneflow good commit'
        required: true
      module_resnet_type:
        description: 'ResNet50 type, eg:ddp,graph'
        required: true
        default: 'graph'
      gpu_num_per_node:
        description: 'gpu number per node'
        required: true
        default: 1
env:
  ONEFLOW_SRC: oneflow-src

jobs:
  test_module:
    name: Test Module ResNet50
    runs-on: ['self-hosted', 'linux', 'provision']
    steps:
      - uses: actions/checkout@v2
      - name: Checkout Oneflow-Inc/oneflow
        uses: actions/checkout@v2
        with:
          repository: Oneflow-Inc/oneflow
          ref: master
      - name: Build OneFlow
        env:
          module_resnet_type: ${{ github.event.inputs.of_good_commit }}
        run: |
          set -x
          cd oneflow
          git bisect start ${{ github.event.inputs.of_bad_commit }} ${{ github.event.inputs.of_good_commit }}
          pwd
          if [ "${{ matrix.compute_platform }}" == "ddp" ]; then
              run_cmd="python3 -m oneflow.distributed.launch --nproc_per_node 1 --nnodes 1 --node_rank 0 --master_addr 127.0.0.1 /home/oyy/workspace/models/Vision/classification/image/resnet50/train.py --ofrecord-path /dataset/ImageNet/ofrecord --ofrecord-part-num 256 --num-devices-per-node 1 --lr 0 --momentum 0.875 --num-epochs 1 --train-batch-size 64 --val-batch-size 50 --print-interval 1"
          elif [ "${{ matrix.compute_platform }}" == "graph" ]; then
              run_cmd="python3 -m oneflow.distributed.launch --nproc_per_node 1 --nnodes 1 --node_rank 0 --master_addr 127.0.0.1 /home/oyy/workspace/models/Vision/classification/image/resnet50/train.py --ofrecord-path /dataset/ImageNet/ofrecord --ofrecord-part-num 256 --num-devices-per-node 1 --lr 0 --momentum 0.875 --num-epochs 1 --train-batch-size 64 --val-batch-size 50 --print-interval 1 --use-gpu-decode --scale-grad --graph"
          else
              echo " not supported"
              exit 1
          fi

          
          if [ ! -d "build" ]; then
            mkdir ./build
          fi
          pwd
          cd build
          cmake .. -C ../cmake/caches/cn/cuda.cmake
          make -j$(nproc)
          source source.sh
          python3 -m oneflow --doctor
          
